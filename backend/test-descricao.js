import Descricao from './src/models/Descricao.js';
import { createTables } from './src/config/init-db.js';

async function testDescricao() {
  try {
    console.log('üîç Testando funcionalidades da entidade Descri√ß√£o...');
    
    // Inicializar tabelas
    await createTables();
    console.log('‚úÖ Tabelas inicializadas');
    
    // Testar cria√ß√£o de descri√ß√£o
    console.log('\nüìù Testando cria√ß√£o de descri√ß√£o...');
    const descricao1 = await Descricao.create({
      descricao: 'Computador Desktop',
      subcontasiafi: '03.01',
      vidautil: 5,
      useradd: 'admin'
    });
    console.log('‚úÖ Descri√ß√£o criada:', descricao1);
    
    // Testar cria√ß√£o de outra descri√ß√£o
    console.log('\nüìù Testando cria√ß√£o de outra descri√ß√£o...');
    const descricao2 = await Descricao.create({
      descricao: 'Impressora Laser',
      subcontasiafi: '03.02',
      vidautil: 3,
      useradd: 'admin'
    });
    console.log('‚úÖ Descri√ß√£o criada:', descricao2);
    
    // Testar listagem de todas as descri√ß√µes
    console.log('\nüìã Testando listagem de descri√ß√µes...');
    const todasDescricoes = await Descricao.findAll();
    console.log('‚úÖ Total de descri√ß√µes:', todasDescricoes.length);
    todasDescricoes.forEach(desc => {
      console.log(`   - ${desc.codigo}: ${desc.descricao}`);
    });
    
    // Testar busca por ID
    console.log('\nüîç Testando busca por ID...');
    const descricaoPorId = await Descricao.findById(descricao1.id);
    console.log('‚úÖ Descri√ß√£o encontrada por ID:', descricaoPorId.descricao);
    
    // Testar busca por c√≥digo
    console.log('\nüîç Testando busca por c√≥digo...');
    const descricaoPorCodigo = await Descricao.findByCodigo(descricao1.codigo);
    console.log('‚úÖ Descri√ß√£o encontrada por c√≥digo:', descricaoPorCodigo.descricao);
    
    // Testar atualiza√ß√£o
    console.log('\n‚úèÔ∏è Testando atualiza√ß√£o de descri√ß√£o...');
    const descricaoAtualizada = await descricao1.update({
      descricao: 'Computador Desktop Intel i7',
      subcontasiafi: '03.01',
      vidautil: 6,
      useradd: 'admin'
    });
    console.log('‚úÖ Descri√ß√£o atualizada:', descricaoAtualizada.descricao);
    
    // Testar busca por termo
    console.log('\nüîç Testando busca por termo...');
    const descricoesPorTermo = await Descricao.findByDescricao('computador');
    console.log('‚úÖ Descri√ß√µes encontradas por termo:', descricoesPorTermo.length);
    
    // Testar contagem
    console.log('\nüìä Testando contagem de descri√ß√µes...');
    const totalDescricoes = await Descricao.count();
    console.log('‚úÖ Total de descri√ß√µes ativas:', totalDescricoes);
    
    // Testar pagina√ß√£o
    console.log('\nüìÑ Testando pagina√ß√£o...');
    const descricoesPaginadas = await Descricao.findWithPagination(1, 5, '');
    console.log('‚úÖ Descri√ß√µes paginadas:', descricoesPaginadas.descricoes.length);
    console.log('   P√°gina:', descricoesPaginadas.pagination.page);
    console.log('   Total de p√°ginas:', descricoesPaginadas.pagination.totalPages);
    
    // Testar exclus√£o (soft delete)
    console.log('\nüóëÔ∏è Testando exclus√£o de descri√ß√£o...');
    const descricaoExcluida = await descricao2.delete();
    console.log('‚úÖ Descri√ß√£o exclu√≠da (soft delete):', descricaoExcluida);
    
    // Verificar que a descri√ß√£o exclu√≠da n√£o aparece na listagem
    const descricoesAposExclusao = await Descricao.findAll();
    console.log('‚úÖ Total de descri√ß√µes ap√≥s exclus√£o:', descricoesAposExclusao.length);
    
    console.log('\nüéâ Todos os testes da entidade Descri√ß√£o passaram com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error);
    process.exit(1);
  }
}

// Executar testes
testDescricao();